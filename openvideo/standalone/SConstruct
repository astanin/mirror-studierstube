import os
import sys
import buildutils

#****************************************************************************
# The options are saved to a file and reapplied automatically
#****************************************************************************
opts = Options(['build.opts'], ARGUMENTS)
opts.Add('PREFIX', 'Sets the project installation directory', '/usr/local')
opts.Add('BINDIR', 'Sets the relative binary installation directory', 'bin')

#****************************************************************************
# Set up environment and save options to disk
#****************************************************************************
env = Environment(options = opts, ENV = os.environ)
opts.Save('build.opts', env)

#****************************************************************************
# Make sure ACE is available
#****************************************************************************
conf = Configure(env)
if conf.TryAction('pkg-config --exists OpenVideo')[0]:
    env.ParseConfig('pkg-config --cflags --libs OpenVideo')
else:
    print "****************************************************************************"
    print "ERROR: You need to have OpenVideo installed and OpenVideo.pc in your"
    print "PKG_CONFIG_PATH..."
    print "****************************************************************************"
    sys.exit(-1)

conf.Finish()

#****************************************************************************
# Generate help message
#****************************************************************************
Help(opts.GenerateHelpText(env))

#****************************************************************************
# Build openvideo test application
#****************************************************************************

# Print welcoming message that makes you feel warm and fuzzy inside;)
print "\n...Building...\n"

# Set up filters for source and include files
sourcefilter  = '\.cxx$|\.cpp$|\.moc$|\.cc$|\.c$'
ignorefilter  = '/ignore/|/ignore$|\.scon|\.svn|\.#'

# Search for source files
sourcedir   = Dir('#').abspath
sourcefiles = buildutils.listtrav(sourcedir , sourcedir)
sourcefiles = buildutils.regexpfilter(sourcefiles, sourcefilter, True)
sourcefiles = buildutils.regexpfilter(sourcefiles, ignorefilter, False)

# Bulid shared library 
openvideolib = env.Program('openvideo-bin', sourcefiles)
env.Alias(target = ['install'], source = env.Install(dir = '${PREFIX}/${BINDIR}', source = openvideolib))

###########################################################################
# Done:)
###########################################################################
