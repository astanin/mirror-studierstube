#!/usr/bin/env python

import sys
import os
sys.path.append('ICGBuilder')
import icgbuilder
import buildutils

#***************************************************************************************
#                  BUILD TARGETS DEFINITION
# This section defines the build targets as dictionaries containing the relevant
# information. The targets could also be loaded from an external file, this is to be
# implemented in the next version of the build system.
# The available fields to provide information about a target are as follows:
#
#   name :      string representing the name of the compiled target without extension.
#   type :      string, depends on the kind of compile, available values are
#                      DL  for dynamic libraries
#                      LIB for static libraries
#                      PRG for consonle applications
#   libs :      list of libraries that will be linked with the target, the builder
#               will attempt to find the appropriate include path, and libpath for
#               these libraries, failure to get this information will result in
#               a script error.
#   use  :      dictionary of other libraries on which the target depends. Each of these
#               will result in the inclusion of one defines flag and the addition of
#               an include path to the compilation. Failure to find include paths
#               for USE variables will result in a script warning
#   src_root:   [Optional] the root directory of the source tree, if missing it
#               will be set by the ConfigurationBuilder
#   src_ignore: [Optional] list of directories or files inside the src_root tree
#               that must be ignored for this target
#   src_use:    [Optional] list of directories or files inside the src_root tree
#               that must be used to build the target. If not defined, all folders
#               and files inside the src_root will be used to build the target
#
#***************************************************************************************

version      = '1.0.0'
project      = 'ARToolKitPlus'
description  = project + ' is a library for tracking fiducial markers'
mainlib      = 'ARToolKitPlus'
installRoot  = ''#deprecated variable
includeDir   = os.path.join(os.getcwd(),'include')
prefix       = ''

targetList = []

if sys.platform == 'win32':
    libraryList =['artoolkitplus']
    dl ={'name'       : 'ARToolKitPlusDll',
         'type'       : 'DL',
         'defines'    : ['ARTOOLKITPLUS_DLL', 'ARTOOLKITPLUS_EXPORTS','LIBRPP_STATIC'],
         'src_use'    : ['librpp', 'extra', 'core', 'DLL.cpp', 'MemoryManager.cpp', 'MemoryManagerMemMap.cpp', 'CameraAdvImpl.cxx', 'CameraFactory.cxx', 'CameraImpl.cxx'],
         'src_ignore' : ['librpp\\MATLAB']
         
     }

    lib ={'name':'artoolkitplus',
          'type':'LIB',
          'defines' : ['"_LIB"', 'LIBRPP_STATIC']      ,
          'src_use'    : ['librpp', 'extra', 'core', 'MemoryManager.cpp', 'MemoryManagerMemMap.cpp', 'CameraAdvImpl.cxx', 'CameraFactory.cxx', 'CameraImpl.cxx'],
          'src_ignore' : ['librpp\\MATLAB']

       }

    simple ={'name'   :'simple',
             'type'   :'PRG',
             'libs'   :['artoolkitplus'],
             'src_use': [os.getcwd() + '/sample/simple']
       }

    multi ={'name':'multi',
            'type':'PRG',
             'libs'   :['artoolkitplus'],
            'src_use': [os.getcwd() + '/sample/multi']
       }



    targetList.append(dl)
    targetList.append(lib)
    targetList.append(simple)
    targetList.append(multi)

else:
    dl ={'name': 'ARToolKitPlus',
         'type': 'DL',
         'defines'    : ['ARTOOLKITPLUS_DLL']
     }
    dl['src_use']    = ['librpp', 'DLL.cpp', 'extra', 'core',  'MemoryManager.cpp', 'MemoryManagerMemMap.cpp', 'CameraAdvImpl.cxx', 'CameraFactory.cxx', 'CameraImpl.cxx']
    dl['src_ignore'] = ['librpp/MATLAB']    

    simple ={'name'   :'simple',
             'type'   :'PRG',
             'libs'   :['ARToolKitPlus'],
             'src_use': [os.getcwd() + '/sample/simple']
       }

    multi ={'name':'multi',
            'type':'PRG',
             'libs'   :['ARToolKitPlus'],
            'src_use': [os.getcwd() + '/sample/multi']
       }


    targetList.append(dl)
    targetList.append(simple)
    targetList.append(multi)


#======================== CONFIGURATION SECTION =============================
# Following is the configuration section. In it most of the options for
# building the specified targets will be set, and then written to a file
# called config.user. This file can be later personalized to allow some
#

# Following are default flags for creating the supported target types. 
# Default flags will be applied to all targets of the same sort. In this
# section flags for different types of builds in different platforms can be
# set so that they apply to all targets of the same sort. Supported targets
# are dynamic libraries (dllflags), static libraries (libflags), and 
# executables (prgflags).
#============================================================================

if sys.platform == 'win32':
	from win32Flags import defaultBuildFlags
	
	# list of libraries that might be used by this project
	scannerType = 'env'

	# directories needed for the build and install process

	buildDir     = os.path.join(os.getcwd(), 'build', 'win32')



	# attempt to add the define DLLNAME_EXPORTS to all targets of type DL
	# in most of the cases it might solve the problem of exporting symbols
	for t in targetList:
		if t['type'] == 'DL':
			if t.has_key('defines'):
				t['defines'].append(t['name'].upper() + '_EXPORTS')
			else:
				t['defines'] = [t['name'].upper() + '_EXPORTS']
	
elif sys.platform == 'linux' or sys.platform == 'linux2':
	from linuxFlags import *
	
	scannerType = 'pkg'
	libraryList =['boost', 'ACE', 'xerces', 'omniORB4', 'omniCOS4', 'omniEvents',
		      'omnithread3','XMLClient']


	# directories needed for the build and install process
	buildDir     = os.path.join(os.getcwd(), 'build', 'linux')



elif sys.platform == 'darwin':
	from darwinFlags import *
	
	# list of libraries that might be used by this project
	scannerType = 'pkg'
	libraryList =['boost', 'ACE', 'xerces-c', 'x11', 'omniORB4', 'omniCOS4', 'omniEvents',
		      'omnithread3','XMLClient']

	buildDir     = os.path.join(prefix, 'build', 'darwin')


srcDir       = os.path.join(os.getcwd(), 'src')	

config_file='config.opts'
	
print 'CONFIGURE: Searching for installed libraries'
# to get the include path for all libraries we need to retrieve 
# the environment vars pointing to the root of each lib
envvars = os.environ



# create the builder with an empty target list
buildConfig = icgbuilder.ConfigBuilder(project, scannerType, envvars,
				       ARGUMENTS, libraryList)

# add extra configuration flags
buildConfig.desc     = description
buildConfig.mainlib  = mainlib
buildConfig.version  = version
buildConfig.prefix   = prefix
buildConfig.buildDir = buildDir
buildConfig.srcDir   = srcDir

# setup the default build flags in the configurator
buildConfig.setDefaultBuildFlags(defaultBuildFlags)

# add main include directory to all configurations
buildConfig.setIncDir(includeDir)

# create the build targets
buildConfig.setTargetList(targetList)

# this call makes all the targets try to guess their include and library flags
# and prepares the configuration for the build
buildConfig.createBuildEnvironments()
# write a config file to be read by scons and used to build each target
buildConfig.writeConfigFile(ARGUMENTS)
buildConfig.generateOptions()
#-----------------------------------------------------------------------------
# Read the options from the config file and update the various necessary flags
# 
#
#-----------------------------------------------------------------------------


Help(buildConfig.getHelpText())
user_options_dict = buildConfig.getOptionsDict()
env = Environment (ENV = os.environ)
ibuilder = icgbuilder.IcgBuilder(user_options_dict, env)



print "\n"
print "============================================================"
print "=      Configuration options for "+ project +" compile       ="
print "============================================================"

#==================    BUILD SECTION    ====================================
#
# In this section, the targets are compiled using the options from 
# config.opts, which are derived themselves from those in config.user
#
#===========================================================================

ibuilder.buildAll()
ibuilder.installAll()

###########################################################################
# Done:)
###########################################################################

